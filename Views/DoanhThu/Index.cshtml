@{
    ViewData["Title"] = "Doanh thu";
}

<style>
    <style >
    body {
        font-family: Arial, sans-serif;
        padding: 20px;
    }

    .tab-container {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 20px;
        margin: 20px;
    }

    .tab-content .content {
        margin-top: 20px;
    }

    .tab-pane {
        padding: 20px;
    }

    .select2-container .select2-selection--single {
        height: 38px;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 14px;
        background-color: #fff;
        color: #333;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 38px;
    }

    .select2-dropdown {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .select2-results__option {
        padding: 8px;
    }

    .select2-results__option--highlighted {
        background-color: #f1f1f1;
    }

    /* Custom styles for buttons */
    .btn {
        margin: 5px;
    }
</style>
</style>

<div class="tab-container">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="tab2-tab" data-toggle="tab" href="#tab2" role="tab" aria-controls="tab2" aria-selected="true">Tổng</a>
        </li>
    </ul>
    <div class="tab-content bg-white" id="myTabContent">
        <div class="tab-pane fade show active" id="tab2" role="tabpanel" aria-labelledby="tab2-tab">
            <div class="container-fluid pt-4">
                <div class="row">
                    <div class="col-md-12">
                        <button class="btn btn-primary" onclick="getTotalRevenue('today')">Hôm nay</button>
                        <button class="btn btn-primary" onclick="getTotalRevenue('yesterday')">Hôm qua</button>
                        <button class="btn btn-primary" onclick="getTotalRevenue('thisweek')">Tuần này</button>
                        <button class="btn btn-primary" onclick="getTotalRevenue('thismonth')">Tháng này</button>
                        <select class="form-control d-inline-block w-auto ml-2 " id="monthSelect" onchange="getTotalRevenue('selectedMonth')">
                            <option value="">Chọn tháng</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="container-fluid pt-4">
                <div class="row">
                    <div class="col-sm-4 ">
                        <div class="bg-light rounded d-flex align-items-center justify-content-between p-4">
                            <i class="fa fa-chart-line fa-3x text-primary"></i>
                            <div class="ms-3">
                                <p class="mb-2">Tổng tiền Vé</p>
                                <h6 class="mb-0" id="total-ve">0</h6>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 ">
                        <div class="bg-light rounded d-flex align-items-center justify-content-between p-4">
                            <i class="fa fa-chart-bar fa-3x text-primary"></i>
                            <div class="ms-3">
                                <p class="mb-2">Tổng tiền Hàng</p>
                                <h6 class="mb-0" id="total-hang">0</h6>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4 ">
                        <div class="bg-light rounded d-flex align-items-center justify-content-between p-4">
                            <i class="fa fa-chart-bar fa-3x text-primary"></i>
                            <div class="ms-3">
                                <p class="mb-2">Tổng tiền</p>
                                <h6 class="mb-0" id="total-all">0</h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-8 mt-4">
                    <div class="col-sm-12 col-xl-12">
                        <div class="bg-light rounded h-100 p-4">
                            <h6 class="mb-4">Biểu đồ cột doanh thu </h6>
                            <canvas id="salse-revenue"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-4 mt-4">
                     <div class="col-sm-12 col-xl-12">
                            <div class="bg-light rounded h-100 p-4">
                                <h6 class="mb-4">Biểu đồ tròn</h6>
                                <canvas id="pie-chart"></canvas>
                            </div>
                     </div>
                </div>
            </div>
           
            
        </div>
    </div>
</div>

<script>
    function getTotalRevenue(period) {
        let fromDate, toDate;

        switch (period) {
            case 'today':
                fromDate = toDate = "";
                break;
            case 'yesterday':
                const yesterday = new Date();
                yesterday.setDate(yesterday.getDate() - 1);
                fromDate = toDate = yesterday.toISOString().split('T')[0];
                break;
            case 'thisweek':
                const today = new Date();
                const firstDay = new Date(today.setDate(today.getDate() - today.getDay()));
                const lastDay = new Date(firstDay);
                lastDay.setDate(firstDay.getDate() + 6);
                fromDate = firstDay.toISOString().split('T')[0];
                toDate = lastDay.toISOString().split('T')[0];
                break;
            case 'thismonth':
                const firstDate = new Date(new Date().getFullYear(), new Date().getMonth(), 1);
                const lastDate = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);
                fromDate = firstDate.toISOString().split('T')[0];
                toDate = lastDate.toISOString().split('T')[0];
                break;
            case 'selectedMonth':
                const selectedMonth = document.getElementById('monthSelect').value;
                if (selectedMonth) {
                    const [year, month] = selectedMonth.split('-');
                    const firstDayOfMonth = new Date(year, month - 1, 1);
                    const lastDayOfMonth = new Date(year, month, 0);
                    fromDate = firstDayOfMonth.toISOString().split('T')[0];
                    toDate = lastDayOfMonth.toISOString().split('T')[0];
                }
                break;
            case 'custom':
                const customDate = document.getElementById('customDate').value;
                fromDate = toDate = customDate;
                break;
            default:
                break;
        }
        console.log( fromDate, toDate);

        fetch(`/api/doanhthu/total?fromDate=${fromDate}&toDate=${toDate}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                processData(data);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    }

    // Hàm vẽ biểu đồ
    function drawCharts(listDate, listTotalHang, listTotalVe, listTotalHuy ,listTotal) {
        // Destroy existing charts if they exist
        if (window.myChart2) {
            window.myChart2.destroy();
        }
        if (window.myChart5) {
            window.myChart5.destroy();
        }
        // Multiple Line Chart
        var ctx2 = $("#salse-revenue").get(0).getContext("2d");
        window.myChart2 = new Chart(ctx2, {
            type: "bar",
            data: {
                labels: listDate,
                datasets: [{
                    label: "Vé",
                    data: listTotalVe,
                    backgroundColor: "rgba(0, 156, 255, .5)",
                    fill: true
                },
                {
                    label: "Đơn hàng",
                    data: listTotalHang,
                    backgroundColor: "rgba(0, 156, 255, .3)",
                    fill: true
                },
                {
                    label: "Vé đã hủy",
                    data: listTotalHuy,
                    backgroundColor: "rgba(0, 156, 255, .1)",
                    fill: true
                }
                ]
            },
            options: {
                responsive: true
            }
        });
        console.log(listTotalVe, listTotalHang);


        var ctx5 = $("#pie-chart").get(0).getContext("2d");
        window.myChart5 = new Chart(ctx5, {
            type: "pie",
            data: {
                labels: ["Vé", "Hàng", "Vé hủy"],
                datasets: [{
                    backgroundColor: [
                        "rgba(0, 156, 255, .7)",
                        "rgba(0, 156, 255, .6)",
                        "rgba(0, 156, 255, .4)",
                    ],
                    data: [sumArray(listTotalVe), sumArray(listTotalHang), sumArray(listTotalHuy)]
                }]
            },
            options: {
                responsive: true
            }
        });
    }


    function processData(data) {
        if (data && data.length > 0) {
            var listDate = [];
            var listTotalHang = [];
            var listTotalVe = [];
            var listTotalHuy = [];
            var listTotal = [];

            data.forEach(function (item) {
                listDate.push(formatDate(item.datetime));
                listTotalHang.push(item.totalHang);
                listTotalHuy.push(item.totalHuy);
                listTotalVe.push(item.totalVe);
                listTotal.push(item.totalHang + item.totalVe);
            });

            const totalHang = sumArray(listTotalHang);
            const totalVe = sumArray(listTotalVe);
            const totalHuy = sumArray(listTotalHuy);
            setTotal(totalVe, totalHang);
            drawCharts(listDate, listTotalHang, listTotalVe,listTotalHuy, listTotal);
        } else {
            // Handle case where no data is returned or data is empty
            console.error('No data found or empty.');
        }
    }


    function formatVND(number) {
        return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(number);
    }

    function setTotal(totalVe, totalHang) {
        $("#total-ve").text(formatVND(totalVe));
        $("#total-hang").text(formatVND(totalHang));
        var totalAll = totalVe + totalHang;
        $("#total-all").text(formatVND(totalAll));
    }

    function sumArray(arr) {
        return arr.reduce((acc, val) => acc + val, 0);
    }

    function formatDate(dateString) {
        var date = new Date(dateString);
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        return `${day}/${month.toString().padStart(2, '0')}`;
    }

    function populateMonthSelect() {
        const monthSelect = document.getElementById('monthSelect');
        const currentYear = new Date().getFullYear();
        const currentMonth = new Date().getMonth() + 1;

            for (let month = 1; month <= 12; month++) {
            const value = `${currentYear}-${month.toString().padStart(2, '0')}`;
                const text = `Tháng ${month}/${currentYear}`;
                const option = new Option(text, value);
                monthSelect.add(option);
            }

        // Set the current month as selected by default
        monthSelect.value = `${currentYear}-${currentMonth.toString().padStart(2, '0')}`;
    }

    $(document).ready(function () {
        populateMonthSelect();
        getTotalRevenue('today');
    });

  
</script>
